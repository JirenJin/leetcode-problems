# Definition for a binary tree node.
class TreeNode:
     def __init__(self, x):
         self.val = x
         self.left = None
         self.right = None

class Solution:
    def __init__(self):
        self.depths_of_leaf_nodes = []
    # @param {TreeNode} root
    # @return {boolean}
    def isBalanced(self, root):
        self.get_depth_of_leaf(root, 0)
        if not self.depths_of_leaf_nodes:
            return True
        if max(self.depths_of_leaf_nodes) - min(self.depths_of_leaf_nodes)\
                <= 1:
            del self.depths_of_leaf_nodes[:]
            return True
        else:
            del self.depths_of_leaf_nodes[:]
            return False



    def get_depth_of_leaf(self, root, current_depth):
        if root:
            current_depth += 1
            if root.left:
                self.get_depth_of_leaf(root.left, current_depth)
            else:
                self.depths_of_leaf_nodes.append(current_depth)
            if root.right:
                self.get_depth_of_leaf(root.right, current_depth)
            else:
                self.depths_of_leaf_nodes.append(current_depth)
            if not root.left and not root.right:
                self.depths_of_leaf_nodes.append(current_depth)

